// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: filesystem/filesystem.proto

package filesystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilesystemClient is the client API for Filesystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesystemClient interface {
	// Offer files for streaming. Receive download requests as a BroadcastRequest
	Broadcast(ctx context.Context, in *BroadcastManifest, opts ...grpc.CallOption) (Filesystem_BroadcastClient, error)
	// List available download sources
	GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (*GetManifestResponse, error)
	// Download initiates a download stream.
	// Notifies target client with BroadcastRequest.
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Filesystem_DownloadClient, error)
	// Upload initiates an upload stream attempting to fulfill a BroadcastRequest.
	Upload(ctx context.Context, opts ...grpc.CallOption) (Filesystem_UploadClient, error)
}

type filesystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemClient(cc grpc.ClientConnInterface) FilesystemClient {
	return &filesystemClient{cc}
}

func (c *filesystemClient) Broadcast(ctx context.Context, in *BroadcastManifest, opts ...grpc.CallOption) (Filesystem_BroadcastClient, error) {
	stream, err := c.cc.NewStream(ctx, &Filesystem_ServiceDesc.Streams[0], "/filesystem.Filesystem/Broadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemBroadcastClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Filesystem_BroadcastClient interface {
	Recv() (*BroadcastRequest, error)
	grpc.ClientStream
}

type filesystemBroadcastClient struct {
	grpc.ClientStream
}

func (x *filesystemBroadcastClient) Recv() (*BroadcastRequest, error) {
	m := new(BroadcastRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesystemClient) GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (*GetManifestResponse, error) {
	out := new(GetManifestResponse)
	err := c.cc.Invoke(ctx, "/filesystem.Filesystem/GetManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Filesystem_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Filesystem_ServiceDesc.Streams[1], "/filesystem.Filesystem/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Filesystem_DownloadClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type filesystemDownloadClient struct {
	grpc.ClientStream
}

func (x *filesystemDownloadClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesystemClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Filesystem_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Filesystem_ServiceDesc.Streams[2], "/filesystem.Filesystem/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemUploadClient{stream}
	return x, nil
}

type Filesystem_UploadClient interface {
	Send(*FileChunk) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type filesystemUploadClient struct {
	grpc.ClientStream
}

func (x *filesystemUploadClient) Send(m *FileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *filesystemUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FilesystemServer is the server API for Filesystem service.
// All implementations must embed UnimplementedFilesystemServer
// for forward compatibility
type FilesystemServer interface {
	// Offer files for streaming. Receive download requests as a BroadcastRequest
	Broadcast(*BroadcastManifest, Filesystem_BroadcastServer) error
	// List available download sources
	GetManifest(context.Context, *GetManifestRequest) (*GetManifestResponse, error)
	// Download initiates a download stream.
	// Notifies target client with BroadcastRequest.
	Download(*DownloadRequest, Filesystem_DownloadServer) error
	// Upload initiates an upload stream attempting to fulfill a BroadcastRequest.
	Upload(Filesystem_UploadServer) error
	mustEmbedUnimplementedFilesystemServer()
}

// UnimplementedFilesystemServer must be embedded to have forward compatible implementations.
type UnimplementedFilesystemServer struct {
}

func (UnimplementedFilesystemServer) Broadcast(*BroadcastManifest, Filesystem_BroadcastServer) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedFilesystemServer) GetManifest(context.Context, *GetManifestRequest) (*GetManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedFilesystemServer) Download(*DownloadRequest, Filesystem_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFilesystemServer) Upload(Filesystem_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFilesystemServer) mustEmbedUnimplementedFilesystemServer() {}

// UnsafeFilesystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesystemServer will
// result in compilation errors.
type UnsafeFilesystemServer interface {
	mustEmbedUnimplementedFilesystemServer()
}

func RegisterFilesystemServer(s grpc.ServiceRegistrar, srv FilesystemServer) {
	s.RegisterService(&Filesystem_ServiceDesc, srv)
}

func _Filesystem_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BroadcastManifest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemServer).Broadcast(m, &filesystemBroadcastServer{stream})
}

type Filesystem_BroadcastServer interface {
	Send(*BroadcastRequest) error
	grpc.ServerStream
}

type filesystemBroadcastServer struct {
	grpc.ServerStream
}

func (x *filesystemBroadcastServer) Send(m *BroadcastRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Filesystem_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.Filesystem/GetManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).GetManifest(ctx, req.(*GetManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemServer).Download(m, &filesystemDownloadServer{stream})
}

type Filesystem_DownloadServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type filesystemDownloadServer struct {
	grpc.ServerStream
}

func (x *filesystemDownloadServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Filesystem_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesystemServer).Upload(&filesystemUploadServer{stream})
}

type Filesystem_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*FileChunk, error)
	grpc.ServerStream
}

type filesystemUploadServer struct {
	grpc.ServerStream
}

func (x *filesystemUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *filesystemUploadServer) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Filesystem_ServiceDesc is the grpc.ServiceDesc for Filesystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filesystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesystem.Filesystem",
	HandlerType: (*FilesystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManifest",
			Handler:    _Filesystem_GetManifest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Broadcast",
			Handler:       _Filesystem_Broadcast_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Filesystem_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _Filesystem_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "filesystem/filesystem.proto",
}
