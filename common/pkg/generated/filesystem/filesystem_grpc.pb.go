// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: filesystem/filesystem.proto

package filesystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Filesystem_Broadcast_FullMethodName   = "/filesystem.Filesystem/Broadcast"
	Filesystem_GetManifest_FullMethodName = "/filesystem.Filesystem/GetManifest"
	Filesystem_Download_FullMethodName    = "/filesystem.Filesystem/Download"
	Filesystem_Upload_FullMethodName      = "/filesystem.Filesystem/Upload"
)

// FilesystemClient is the client API for Filesystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilesystemClient interface {
	// Offer files for streaming. Receive download requests as a BroadcastRequest
	Broadcast(ctx context.Context, in *BroadcastManifest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BroadcastRequest], error)
	// List available download sources
	GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (*GetManifestResponse, error)
	// Download initiates a download stream.
	// Notifies target client with BroadcastRequest.
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	// Upload initiates an upload stream attempting to fulfill a BroadcastRequest.
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, UploadResponse], error)
}

type filesystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemClient(cc grpc.ClientConnInterface) FilesystemClient {
	return &filesystemClient{cc}
}

func (c *filesystemClient) Broadcast(ctx context.Context, in *BroadcastManifest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BroadcastRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Filesystem_ServiceDesc.Streams[0], Filesystem_Broadcast_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BroadcastManifest, BroadcastRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Filesystem_BroadcastClient = grpc.ServerStreamingClient[BroadcastRequest]

func (c *filesystemClient) GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (*GetManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetManifestResponse)
	err := c.cc.Invoke(ctx, Filesystem_GetManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Filesystem_ServiceDesc.Streams[1], Filesystem_Download_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadRequest, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Filesystem_DownloadClient = grpc.ServerStreamingClient[FileChunk]

func (c *filesystemClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Filesystem_ServiceDesc.Streams[2], Filesystem_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Filesystem_UploadClient = grpc.ClientStreamingClient[FileChunk, UploadResponse]

// FilesystemServer is the server API for Filesystem service.
// All implementations must embed UnimplementedFilesystemServer
// for forward compatibility.
type FilesystemServer interface {
	// Offer files for streaming. Receive download requests as a BroadcastRequest
	Broadcast(*BroadcastManifest, grpc.ServerStreamingServer[BroadcastRequest]) error
	// List available download sources
	GetManifest(context.Context, *GetManifestRequest) (*GetManifestResponse, error)
	// Download initiates a download stream.
	// Notifies target client with BroadcastRequest.
	Download(*DownloadRequest, grpc.ServerStreamingServer[FileChunk]) error
	// Upload initiates an upload stream attempting to fulfill a BroadcastRequest.
	Upload(grpc.ClientStreamingServer[FileChunk, UploadResponse]) error
	mustEmbedUnimplementedFilesystemServer()
}

// UnimplementedFilesystemServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFilesystemServer struct{}

func (UnimplementedFilesystemServer) Broadcast(*BroadcastManifest, grpc.ServerStreamingServer[BroadcastRequest]) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedFilesystemServer) GetManifest(context.Context, *GetManifestRequest) (*GetManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedFilesystemServer) Download(*DownloadRequest, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFilesystemServer) Upload(grpc.ClientStreamingServer[FileChunk, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFilesystemServer) mustEmbedUnimplementedFilesystemServer() {}
func (UnimplementedFilesystemServer) testEmbeddedByValue()                    {}

// UnsafeFilesystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesystemServer will
// result in compilation errors.
type UnsafeFilesystemServer interface {
	mustEmbedUnimplementedFilesystemServer()
}

func RegisterFilesystemServer(s grpc.ServiceRegistrar, srv FilesystemServer) {
	// If the following call pancis, it indicates UnimplementedFilesystemServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Filesystem_ServiceDesc, srv)
}

func _Filesystem_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BroadcastManifest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemServer).Broadcast(m, &grpc.GenericServerStream[BroadcastManifest, BroadcastRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Filesystem_BroadcastServer = grpc.ServerStreamingServer[BroadcastRequest]

func _Filesystem_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Filesystem_GetManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).GetManifest(ctx, req.(*GetManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemServer).Download(m, &grpc.GenericServerStream[DownloadRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Filesystem_DownloadServer = grpc.ServerStreamingServer[FileChunk]

func _Filesystem_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesystemServer).Upload(&grpc.GenericServerStream[FileChunk, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Filesystem_UploadServer = grpc.ClientStreamingServer[FileChunk, UploadResponse]

// Filesystem_ServiceDesc is the grpc.ServiceDesc for Filesystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Filesystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesystem.Filesystem",
	HandlerType: (*FilesystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManifest",
			Handler:    _Filesystem_GetManifest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Broadcast",
			Handler:       _Filesystem_Broadcast_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _Filesystem_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _Filesystem_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "filesystem/filesystem.proto",
}
