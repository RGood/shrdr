/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: chat/chat.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../identity/identity";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace chat {
    export class ChatMessage extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            author?: dependency_1.identity.User;
            content?: string;
            timestamp?: number;
        } & (({
            room_id?: string;
            user_id?: never;
        } | {
            room_id?: never;
            user_id?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("author" in data && data.author != undefined) {
                    this.author = data.author;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_room_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get author() {
            return pb_1.Message.getWrapperField(this, dependency_1.identity.User, 3) as dependency_1.identity.User;
        }
        set author(value: dependency_1.identity.User) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_author() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get target() {
            const cases: {
                [index: number]: "none" | "room_id" | "user_id";
            } = {
                0: "none",
                1: "room_id",
                2: "user_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            room_id?: string;
            user_id?: string;
            author?: ReturnType<typeof dependency_1.identity.User.prototype.toObject>;
            content?: string;
            timestamp?: number;
        }): ChatMessage {
            const message = new ChatMessage({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.author != null) {
                message.author = dependency_1.identity.User.fromObject(data.author);
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                user_id?: string;
                author?: ReturnType<typeof dependency_1.identity.User.prototype.toObject>;
                content?: string;
                timestamp?: number;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.author != null) {
                data.author = this.author.toObject();
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_room_id)
                writer.writeString(1, this.room_id);
            if (this.has_user_id)
                writer.writeString(2, this.user_id);
            if (this.has_author)
                writer.writeMessage(3, this.author, () => this.author.serialize(writer));
            if (this.content.length)
                writer.writeString(4, this.content);
            if (this.timestamp != 0)
                writer.writeInt64(5, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.user_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.author, () => message.author = dependency_1.identity.User.deserialize(reader));
                        break;
                    case 4:
                        message.content = reader.readString();
                        break;
                    case 5:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatMessage {
            return ChatMessage.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedChatService {
        static definition = {
            JoinRoom: {
                path: "/chat.Chat/JoinRoom",
                requestStream: true,
                responseStream: true,
                requestSerialize: (message: ChatMessage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ChatMessage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ChatMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ChatMessage.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract JoinRoom(call: grpc_1.ServerDuplexStream<ChatMessage, ChatMessage>): void;
    }
    export class ChatClient extends grpc_1.makeGenericClientConstructor(UnimplementedChatService.definition, "Chat", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        JoinRoom: GrpcChunkServiceInterface<ChatMessage, ChatMessage> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<ChatMessage, ChatMessage> => {
            return super.JoinRoom(metadata, options);
        };
    }
}
