// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: chat/chat.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";
import { User } from "../identity/identity";

export interface JoinRoom {
  roomId: string;
}

export interface Message {
  roomId?: string | undefined;
  userId?: string | undefined;
  content: string;
}

export interface LeaveRoom {
  roomId: string;
}

export interface Send {
  join?: JoinRoom | undefined;
  leave?: LeaveRoom | undefined;
  message?: Message | undefined;
}

export interface ChatMessage {
  roomId?: string | undefined;
  userId?: string | undefined;
  author: User | undefined;
  content: string;
  timestamp: number;
}

function createBaseJoinRoom(): JoinRoom {
  return { roomId: "" };
}

export const JoinRoom: MessageFns<JoinRoom> = {
  encode(message: JoinRoom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId !== "") {
      writer.uint32(10).string(message.roomId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinRoom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<JoinRoom>): JoinRoom {
    return JoinRoom.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JoinRoom>): JoinRoom {
    const message = createBaseJoinRoom();
    message.roomId = object.roomId ?? "";
    return message;
  },
};

function createBaseMessage(): Message {
  return { roomId: undefined, userId: undefined, content: "" };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId !== undefined) {
      writer.uint32(10).string(message.roomId);
    }
    if (message.userId !== undefined) {
      writer.uint32(18).string(message.userId);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Message>): Message {
    return Message.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Message>): Message {
    const message = createBaseMessage();
    message.roomId = object.roomId ?? undefined;
    message.userId = object.userId ?? undefined;
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseLeaveRoom(): LeaveRoom {
  return { roomId: "" };
}

export const LeaveRoom: MessageFns<LeaveRoom> = {
  encode(message: LeaveRoom, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId !== "") {
      writer.uint32(10).string(message.roomId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeaveRoom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaveRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<LeaveRoom>): LeaveRoom {
    return LeaveRoom.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LeaveRoom>): LeaveRoom {
    const message = createBaseLeaveRoom();
    message.roomId = object.roomId ?? "";
    return message;
  },
};

function createBaseSend(): Send {
  return { join: undefined, leave: undefined, message: undefined };
}

export const Send: MessageFns<Send> = {
  encode(message: Send, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.join !== undefined) {
      JoinRoom.encode(message.join, writer.uint32(10).fork()).join();
    }
    if (message.leave !== undefined) {
      LeaveRoom.encode(message.leave, writer.uint32(18).fork()).join();
    }
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Send {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSend();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.join = JoinRoom.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.leave = LeaveRoom.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Send>): Send {
    return Send.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Send>): Send {
    const message = createBaseSend();
    message.join = (object.join !== undefined && object.join !== null) ? JoinRoom.fromPartial(object.join) : undefined;
    message.leave = (object.leave !== undefined && object.leave !== null)
      ? LeaveRoom.fromPartial(object.leave)
      : undefined;
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseChatMessage(): ChatMessage {
  return { roomId: undefined, userId: undefined, author: undefined, content: "", timestamp: 0 };
}

export const ChatMessage: MessageFns<ChatMessage> = {
  encode(message: ChatMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomId !== undefined) {
      writer.uint32(10).string(message.roomId);
    }
    if (message.userId !== undefined) {
      writer.uint32(18).string(message.userId);
    }
    if (message.author !== undefined) {
      User.encode(message.author, writer.uint32(26).fork()).join();
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    if (message.timestamp !== 0) {
      writer.uint32(40).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.author = User.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ChatMessage>): ChatMessage {
    return ChatMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChatMessage>): ChatMessage {
    const message = createBaseChatMessage();
    message.roomId = object.roomId ?? undefined;
    message.userId = object.userId ?? undefined;
    message.author = (object.author !== undefined && object.author !== null)
      ? User.fromPartial(object.author)
      : undefined;
    message.content = object.content ?? "";
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

export type ChatDefinition = typeof ChatDefinition;
export const ChatDefinition = {
  name: "Chat",
  fullName: "chat.Chat",
  methods: {
    connect: {
      name: "Connect",
      requestType: Send,
      requestStream: true,
      responseType: ChatMessage,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface ChatServiceImplementation<CallContextExt = {}> {
  connect(
    request: AsyncIterable<Send>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<ChatMessage>>;
}

export interface ChatClient<CallOptionsExt = {}> {
  connect(
    request: AsyncIterable<DeepPartial<Send>>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<ChatMessage>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
