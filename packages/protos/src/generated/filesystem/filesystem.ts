// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: filesystem/filesystem.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import type { CallContext, CallOptions } from "nice-grpc-common";

export interface FSEntry {
  file?: File | undefined;
  folder?: Folder | undefined;
}

export interface File {
  name: string;
  size: number;
}

export interface Folder {
  name: string;
  contents: FSEntry[];
}

export interface BroadcastManifest {
  contents: FSEntry[];
}

/** Upstream requests for data */
export interface BroadcastRequest {
  userId: string;
  requestId: string;
  filePath: string;
}

export interface DownloadRequest {
  fromUser: string;
  filePath: string;
  chunkSize: string;
}

export interface FileChunk {
  filePath: string;
  content: Uint8Array;
  chunkCount: number;
  totalChunks: number;
}

export interface UploadResponse {
  success: boolean;
}

export interface GetManifestRequest {
  path: string;
  recursive: boolean;
}

export interface GetManifestResponse {
  contents: FSEntry[];
}

function createBaseFSEntry(): FSEntry {
  return { file: undefined, folder: undefined };
}

export const FSEntry: MessageFns<FSEntry> = {
  encode(message: FSEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.file !== undefined) {
      File.encode(message.file, writer.uint32(10).fork()).join();
    }
    if (message.folder !== undefined) {
      Folder.encode(message.folder, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FSEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFSEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.file = File.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.folder = Folder.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<FSEntry>): FSEntry {
    return FSEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FSEntry>): FSEntry {
    const message = createBaseFSEntry();
    message.file = (object.file !== undefined && object.file !== null) ? File.fromPartial(object.file) : undefined;
    message.folder = (object.folder !== undefined && object.folder !== null)
      ? Folder.fromPartial(object.folder)
      : undefined;
    return message;
  },
};

function createBaseFile(): File {
  return { name: "", size: 0 };
}

export const File: MessageFns<File> = {
  encode(message: File, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.size !== 0) {
      writer.uint32(16).int64(message.size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): File {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.size = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<File>): File {
    return File.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<File>): File {
    const message = createBaseFile();
    message.name = object.name ?? "";
    message.size = object.size ?? 0;
    return message;
  },
};

function createBaseFolder(): Folder {
  return { name: "", contents: [] };
}

export const Folder: MessageFns<Folder> = {
  encode(message: Folder, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.contents) {
      FSEntry.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Folder {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFolder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contents.push(FSEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Folder>): Folder {
    return Folder.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Folder>): Folder {
    const message = createBaseFolder();
    message.name = object.name ?? "";
    message.contents = object.contents?.map((e) => FSEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBroadcastManifest(): BroadcastManifest {
  return { contents: [] };
}

export const BroadcastManifest: MessageFns<BroadcastManifest> = {
  encode(message: BroadcastManifest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.contents) {
      FSEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BroadcastManifest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBroadcastManifest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contents.push(FSEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BroadcastManifest>): BroadcastManifest {
    return BroadcastManifest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BroadcastManifest>): BroadcastManifest {
    const message = createBaseBroadcastManifest();
    message.contents = object.contents?.map((e) => FSEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBroadcastRequest(): BroadcastRequest {
  return { userId: "", requestId: "", filePath: "" };
}

export const BroadcastRequest: MessageFns<BroadcastRequest> = {
  encode(message: BroadcastRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.filePath !== "") {
      writer.uint32(26).string(message.filePath);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BroadcastRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBroadcastRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filePath = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<BroadcastRequest>): BroadcastRequest {
    return BroadcastRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BroadcastRequest>): BroadcastRequest {
    const message = createBaseBroadcastRequest();
    message.userId = object.userId ?? "";
    message.requestId = object.requestId ?? "";
    message.filePath = object.filePath ?? "";
    return message;
  },
};

function createBaseDownloadRequest(): DownloadRequest {
  return { fromUser: "", filePath: "", chunkSize: "" };
}

export const DownloadRequest: MessageFns<DownloadRequest> = {
  encode(message: DownloadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromUser !== "") {
      writer.uint32(10).string(message.fromUser);
    }
    if (message.filePath !== "") {
      writer.uint32(18).string(message.filePath);
    }
    if (message.chunkSize !== "") {
      writer.uint32(26).string(message.chunkSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownloadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownloadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fromUser = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filePath = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chunkSize = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DownloadRequest>): DownloadRequest {
    return DownloadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DownloadRequest>): DownloadRequest {
    const message = createBaseDownloadRequest();
    message.fromUser = object.fromUser ?? "";
    message.filePath = object.filePath ?? "";
    message.chunkSize = object.chunkSize ?? "";
    return message;
  },
};

function createBaseFileChunk(): FileChunk {
  return { filePath: "", content: new Uint8Array(0), chunkCount: 0, totalChunks: 0 };
}

export const FileChunk: MessageFns<FileChunk> = {
  encode(message: FileChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filePath !== "") {
      writer.uint32(10).string(message.filePath);
    }
    if (message.content.length !== 0) {
      writer.uint32(18).bytes(message.content);
    }
    if (message.chunkCount !== 0) {
      writer.uint32(24).int64(message.chunkCount);
    }
    if (message.totalChunks !== 0) {
      writer.uint32(32).int64(message.totalChunks);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filePath = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.chunkCount = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalChunks = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<FileChunk>): FileChunk {
    return FileChunk.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileChunk>): FileChunk {
    const message = createBaseFileChunk();
    message.filePath = object.filePath ?? "";
    message.content = object.content ?? new Uint8Array(0);
    message.chunkCount = object.chunkCount ?? 0;
    message.totalChunks = object.totalChunks ?? 0;
    return message;
  },
};

function createBaseUploadResponse(): UploadResponse {
  return { success: false };
}

export const UploadResponse: MessageFns<UploadResponse> = {
  encode(message: UploadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UploadResponse>): UploadResponse {
    return UploadResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadResponse>): UploadResponse {
    const message = createBaseUploadResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseGetManifestRequest(): GetManifestRequest {
  return { path: "", recursive: false };
}

export const GetManifestRequest: MessageFns<GetManifestRequest> = {
  encode(message: GetManifestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.path !== "") {
      writer.uint32(10).string(message.path);
    }
    if (message.recursive !== false) {
      writer.uint32(16).bool(message.recursive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetManifestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetManifestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.recursive = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetManifestRequest>): GetManifestRequest {
    return GetManifestRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetManifestRequest>): GetManifestRequest {
    const message = createBaseGetManifestRequest();
    message.path = object.path ?? "";
    message.recursive = object.recursive ?? false;
    return message;
  },
};

function createBaseGetManifestResponse(): GetManifestResponse {
  return { contents: [] };
}

export const GetManifestResponse: MessageFns<GetManifestResponse> = {
  encode(message: GetManifestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.contents) {
      FSEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetManifestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetManifestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contents.push(FSEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetManifestResponse>): GetManifestResponse {
    return GetManifestResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetManifestResponse>): GetManifestResponse {
    const message = createBaseGetManifestResponse();
    message.contents = object.contents?.map((e) => FSEntry.fromPartial(e)) || [];
    return message;
  },
};

export type FilesystemDefinition = typeof FilesystemDefinition;
export const FilesystemDefinition = {
  name: "Filesystem",
  fullName: "filesystem.Filesystem",
  methods: {
    /** Offer files for streaming. Receive download requests as a BroadcastRequest */
    broadcast: {
      name: "Broadcast",
      requestType: BroadcastManifest,
      requestStream: false,
      responseType: BroadcastRequest,
      responseStream: true,
      options: {},
    },
    /** List available download sources */
    getManifest: {
      name: "GetManifest",
      requestType: GetManifestRequest,
      requestStream: false,
      responseType: GetManifestResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Download initiates a download stream.
     * Notifies target client with BroadcastRequest.
     */
    download: {
      name: "Download",
      requestType: DownloadRequest,
      requestStream: false,
      responseType: FileChunk,
      responseStream: true,
      options: {},
    },
    /** Upload initiates an upload stream attempting to fulfill a BroadcastRequest. */
    upload: {
      name: "Upload",
      requestType: FileChunk,
      requestStream: true,
      responseType: UploadResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface FilesystemServiceImplementation<CallContextExt = {}> {
  /** Offer files for streaming. Receive download requests as a BroadcastRequest */
  broadcast(
    request: BroadcastManifest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<BroadcastRequest>>;
  /** List available download sources */
  getManifest(
    request: GetManifestRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetManifestResponse>>;
  /**
   * Download initiates a download stream.
   * Notifies target client with BroadcastRequest.
   */
  download(
    request: DownloadRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<FileChunk>>;
  /** Upload initiates an upload stream attempting to fulfill a BroadcastRequest. */
  upload(
    request: AsyncIterable<FileChunk>,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<UploadResponse>>;
}

export interface FilesystemClient<CallOptionsExt = {}> {
  /** Offer files for streaming. Receive download requests as a BroadcastRequest */
  broadcast(
    request: DeepPartial<BroadcastManifest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<BroadcastRequest>;
  /** List available download sources */
  getManifest(
    request: DeepPartial<GetManifestRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetManifestResponse>;
  /**
   * Download initiates a download stream.
   * Notifies target client with BroadcastRequest.
   */
  download(request: DeepPartial<DownloadRequest>, options?: CallOptions & CallOptionsExt): AsyncIterable<FileChunk>;
  /** Upload initiates an upload stream attempting to fulfill a BroadcastRequest. */
  upload(
    request: AsyncIterable<DeepPartial<FileChunk>>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<UploadResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
