"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: filesystem/filesystem.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilesystemDefinition = exports.GetManifestResponse = exports.GetManifestRequest = exports.UploadResponse = exports.FileChunk = exports.DownloadRequest = exports.BroadcastRequest = exports.BroadcastManifest = exports.Folder = exports.File = exports.FSEntry = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
function createBaseFSEntry() {
    return { file: undefined, folder: undefined };
}
exports.FSEntry = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.file !== undefined) {
            exports.File.encode(message.file, writer.uint32(10).fork()).join();
        }
        if (message.folder !== undefined) {
            exports.Folder.encode(message.folder, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFSEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.file = exports.File.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.folder = exports.Folder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.FSEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFSEntry();
        message.file = (object.file !== undefined && object.file !== null) ? exports.File.fromPartial(object.file) : undefined;
        message.folder = (object.folder !== undefined && object.folder !== null)
            ? exports.Folder.fromPartial(object.folder)
            : undefined;
        return message;
    },
};
function createBaseFile() {
    return { name: "", size: 0 };
}
exports.File = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.size !== 0) {
            writer.uint32(16).int64(message.size);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFile();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.size = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.File.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFile();
        message.name = object.name ?? "";
        message.size = object.size ?? 0;
        return message;
    },
};
function createBaseFolder() {
    return { name: "", contents: [] };
}
exports.Folder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        for (const v of message.contents) {
            exports.FSEntry.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFolder();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.contents.push(exports.FSEntry.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.Folder.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFolder();
        message.name = object.name ?? "";
        message.contents = object.contents?.map((e) => exports.FSEntry.fromPartial(e)) || [];
        return message;
    },
};
function createBaseBroadcastManifest() {
    return { contents: [] };
}
exports.BroadcastManifest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.contents) {
            exports.FSEntry.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBroadcastManifest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contents.push(exports.FSEntry.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.BroadcastManifest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBroadcastManifest();
        message.contents = object.contents?.map((e) => exports.FSEntry.fromPartial(e)) || [];
        return message;
    },
};
function createBaseBroadcastRequest() {
    return { userId: "", requestId: "", filePath: "" };
}
exports.BroadcastRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.requestId !== "") {
            writer.uint32(18).string(message.requestId);
        }
        if (message.filePath !== "") {
            writer.uint32(26).string(message.filePath);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBroadcastRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.requestId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.filePath = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.BroadcastRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseBroadcastRequest();
        message.userId = object.userId ?? "";
        message.requestId = object.requestId ?? "";
        message.filePath = object.filePath ?? "";
        return message;
    },
};
function createBaseDownloadRequest() {
    return { fromUser: "", filePath: "", chunkSize: "" };
}
exports.DownloadRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUser !== "") {
            writer.uint32(10).string(message.fromUser);
        }
        if (message.filePath !== "") {
            writer.uint32(18).string(message.filePath);
        }
        if (message.chunkSize !== "") {
            writer.uint32(26).string(message.chunkSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDownloadRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.fromUser = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.filePath = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.chunkSize = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.DownloadRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseDownloadRequest();
        message.fromUser = object.fromUser ?? "";
        message.filePath = object.filePath ?? "";
        message.chunkSize = object.chunkSize ?? "";
        return message;
    },
};
function createBaseFileChunk() {
    return { filePath: "", content: new Uint8Array(0), chunkCount: 0, totalChunks: 0 };
}
exports.FileChunk = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.filePath !== "") {
            writer.uint32(10).string(message.filePath);
        }
        if (message.content.length !== 0) {
            writer.uint32(18).bytes(message.content);
        }
        if (message.chunkCount !== 0) {
            writer.uint32(24).int64(message.chunkCount);
        }
        if (message.totalChunks !== 0) {
            writer.uint32(32).int64(message.totalChunks);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFileChunk();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.filePath = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.content = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.chunkCount = longToNumber(reader.int64());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.totalChunks = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.FileChunk.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseFileChunk();
        message.filePath = object.filePath ?? "";
        message.content = object.content ?? new Uint8Array(0);
        message.chunkCount = object.chunkCount ?? 0;
        message.totalChunks = object.totalChunks ?? 0;
        return message;
    },
};
function createBaseUploadResponse() {
    return { success: false };
}
exports.UploadResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.success !== false) {
            writer.uint32(8).bool(message.success);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUploadResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.success = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.UploadResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseUploadResponse();
        message.success = object.success ?? false;
        return message;
    },
};
function createBaseGetManifestRequest() {
    return { path: "", recursive: false };
}
exports.GetManifestRequest = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.path !== "") {
            writer.uint32(10).string(message.path);
        }
        if (message.recursive !== false) {
            writer.uint32(16).bool(message.recursive);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetManifestRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.path = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.recursive = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.GetManifestRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetManifestRequest();
        message.path = object.path ?? "";
        message.recursive = object.recursive ?? false;
        return message;
    },
};
function createBaseGetManifestResponse() {
    return { contents: [] };
}
exports.GetManifestResponse = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.contents) {
            exports.FSEntry.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetManifestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contents.push(exports.FSEntry.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.GetManifestResponse.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetManifestResponse();
        message.contents = object.contents?.map((e) => exports.FSEntry.fromPartial(e)) || [];
        return message;
    },
};
exports.FilesystemDefinition = {
    name: "Filesystem",
    fullName: "filesystem.Filesystem",
    methods: {
        /** Offer files for streaming. Receive download requests as a BroadcastRequest */
        broadcast: {
            name: "Broadcast",
            requestType: exports.BroadcastManifest,
            requestStream: false,
            responseType: exports.BroadcastRequest,
            responseStream: true,
            options: {},
        },
        /** List available download sources */
        getManifest: {
            name: "GetManifest",
            requestType: exports.GetManifestRequest,
            requestStream: false,
            responseType: exports.GetManifestResponse,
            responseStream: false,
            options: {},
        },
        /**
         * Download initiates a download stream.
         * Notifies target client with BroadcastRequest.
         */
        download: {
            name: "Download",
            requestType: exports.DownloadRequest,
            requestStream: false,
            responseType: exports.FileChunk,
            responseStream: true,
            options: {},
        },
        /** Upload initiates an upload stream attempting to fulfill a BroadcastRequest. */
        upload: {
            name: "Upload",
            requestType: exports.FileChunk,
            requestStream: true,
            responseType: exports.UploadResponse,
            responseStream: false,
            options: {},
        },
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
//# sourceMappingURL=filesystem.js.map