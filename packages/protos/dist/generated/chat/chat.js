"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: chat/chat.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatDefinition = exports.ChatMessage = exports.Send = exports.LeaveRoom = exports.Message = exports.JoinRoom = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
const identity_1 = require("../identity/identity");
function createBaseJoinRoom() {
    return { roomId: "" };
}
exports.JoinRoom = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roomId !== "") {
            writer.uint32(10).string(message.roomId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseJoinRoom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.roomId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.JoinRoom.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseJoinRoom();
        message.roomId = object.roomId ?? "";
        return message;
    },
};
function createBaseMessage() {
    return { roomId: undefined, userId: undefined, content: "" };
}
exports.Message = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roomId !== undefined) {
            writer.uint32(10).string(message.roomId);
        }
        if (message.userId !== undefined) {
            writer.uint32(18).string(message.userId);
        }
        if (message.content !== "") {
            writer.uint32(26).string(message.content);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.roomId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.Message.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseMessage();
        message.roomId = object.roomId ?? undefined;
        message.userId = object.userId ?? undefined;
        message.content = object.content ?? "";
        return message;
    },
};
function createBaseLeaveRoom() {
    return { roomId: "" };
}
exports.LeaveRoom = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roomId !== "") {
            writer.uint32(10).string(message.roomId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLeaveRoom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.roomId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.LeaveRoom.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLeaveRoom();
        message.roomId = object.roomId ?? "";
        return message;
    },
};
function createBaseSend() {
    return { join: undefined, leave: undefined, message: undefined };
}
exports.Send = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.join !== undefined) {
            exports.JoinRoom.encode(message.join, writer.uint32(10).fork()).join();
        }
        if (message.leave !== undefined) {
            exports.LeaveRoom.encode(message.leave, writer.uint32(18).fork()).join();
        }
        if (message.message !== undefined) {
            exports.Message.encode(message.message, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSend();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.join = exports.JoinRoom.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.leave = exports.LeaveRoom.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.message = exports.Message.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.Send.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSend();
        message.join = (object.join !== undefined && object.join !== null) ? exports.JoinRoom.fromPartial(object.join) : undefined;
        message.leave = (object.leave !== undefined && object.leave !== null)
            ? exports.LeaveRoom.fromPartial(object.leave)
            : undefined;
        message.message = (object.message !== undefined && object.message !== null)
            ? exports.Message.fromPartial(object.message)
            : undefined;
        return message;
    },
};
function createBaseChatMessage() {
    return { roomId: undefined, userId: undefined, author: undefined, content: "", timestamp: 0 };
}
exports.ChatMessage = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roomId !== undefined) {
            writer.uint32(10).string(message.roomId);
        }
        if (message.userId !== undefined) {
            writer.uint32(18).string(message.userId);
        }
        if (message.author !== undefined) {
            identity_1.User.encode(message.author, writer.uint32(26).fork()).join();
        }
        if (message.content !== "") {
            writer.uint32(34).string(message.content);
        }
        if (message.timestamp !== 0) {
            writer.uint32(40).int64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        const end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseChatMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.roomId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.author = identity_1.User.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.timestamp = longToNumber(reader.int64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    create(base) {
        return exports.ChatMessage.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseChatMessage();
        message.roomId = object.roomId ?? undefined;
        message.userId = object.userId ?? undefined;
        message.author = (object.author !== undefined && object.author !== null)
            ? identity_1.User.fromPartial(object.author)
            : undefined;
        message.content = object.content ?? "";
        message.timestamp = object.timestamp ?? 0;
        return message;
    },
};
exports.ChatDefinition = {
    name: "Chat",
    fullName: "chat.Chat",
    methods: {
        connect: {
            name: "Connect",
            requestType: exports.Send,
            requestStream: true,
            responseType: exports.ChatMessage,
            responseStream: true,
            options: {},
        },
    },
};
function longToNumber(int64) {
    const num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
//# sourceMappingURL=chat.js.map